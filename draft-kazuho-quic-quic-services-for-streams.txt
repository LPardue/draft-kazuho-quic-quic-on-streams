



QUIC                                                              K. Oku
Internet-Draft                                                    Fastly
Intended status: Standards Track                        28 November 2023
Expires: 31 May 2024


                       QUIC Services for Streams
           draft-kazuho-quic-quic-services-for-streams-latest

Abstract

   This document specifies a polyfill of QUIC version 1 that runs on top
   of bi-directional streams such as TLS.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the QUIC Working Group
   mailing list (quic@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/quic/.

   Source for this draft and an issue tracker can be found at
   https://github.com/kazuho/draft-kazuho-quic-quic-services-for-
   streams.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 31 May 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  The Protocol
     3.1.  Properties of Underlying Streams
   4.  QUIC Frames
     4.1.  STREAM Frames
     4.2.  QSS_TRANSPORT_PARAMETERS Frames
     4.3.  QSS_PING Frames
     4.4.  Extension Frames
   5.  Transport Parameters
     5.1.  Permitted and Forbidden Transport Parameters
     5.2.  max_frame_size Transport Parameter
   6.  Closing the Connection
   7.  Using 0-RTT
   8.  Version Agility
   9.  Implementation Considerations
   10. Security Considerations
   11. IANA Considerations
   12. References
     12.1.  Normative References
     12.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   QUIC version 1 ([RFC9000]) is a bi-directional, authenticated
   transport-layer protocol built on top of UDP ([RFC768]).  The
   protocol provides multiplexed flow-controlled streams without head-
   of-line blocking as one of its core services, along with low-latency
   connection establishment and efficient loss recovery.

   However, there are downsides with QUIC.

   One downside is that QUIC is not as universally accessible as TCP
   ([RFC9293]).  This is because QUIC is built on top of UDP, which is
   occasionally blocked by middleboxes.

   Another downside is that QUIC is computationally expensive compared
   to TLS ([RFC8446]) over TCP.  This is partly because QUIC encrypts
   each packet which is smaller than the encryption unit of TLS leading
   to more overhead, and partly because UDP is less optimized in the
   computing infrastructure.

   Due to these limitations, applications are often served on top of
   both QUIC and TCP, with the former aiming to provide better user-
   experience, while the latter being considered as a backstop for
   network reachability or to provide computational efficiency where
   necessary.

   One such example is HTTP.  HTTP/3 ([RFC9114]) runs on top of QUIC.
   HTTP/2 ([RFC9113]) runs on top of TCP.  Recently, there have been
   proposals to revise HTTP/2 due to security concerns
   ([h2-stream-limits]), which has led people wonder about the cost of
   maintaining multiple versions of HTTP.

   Another example is WebTransport.  WebTransport is a super set of
   HTTP, but because HTTP has different bindings for QUIC and TCP,
   WebTransport defines its own bindings for the two variants of HTTP
   ([webtrans-h3], [webtrans-h2]).

   In order to reduce or eliminate the cost of these duplicated efforts
   to provide services on top of both protocols, this document specifies
   a polyfill that allows application protocols built on top of QUIC to
   run on bi-directional streams such as TCP or TLS.

   The polyfill being specified provides a compatibility layer for
   providing set of the operations (i.e., API) required by QUIC, as
   specified in Section 2.4 and Section 5.3 of [RFC9000].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  The Protocol

   QUIC Services for Streams can be used on any bi-directional byte
   stream that is ordered and reliable; for details, see Section 3.1.

   QUIC frames are sent directly on top of the bi-directional byte
   stream.

   The frames are not encrypted.  It is the task of the lower layer
   providing the bi-directional byte stream (e.g., TLS) to provide
   confidentially and integrity.

   QUIC packet headers are not used.

   For exchanging the Transport Parameters, a new frame called
   QSS_TRANSPORT_PARAMETERS frame is defined.

3.1.  Properties of Underlying Streams

   QUIC Services for Streams is designed to work on top of underlying
   streams that provide the following capabilities:

   In-order delivery of bytes in both directions:  Underlying connection
      provides byte-oriented bi-directional streams that guarantee in-
      order delivery; i.e., bytes that were sent in one order become
      available to the receiving side in the same order.

   Guaranteed delivery:  If the underlying byte stream is built on top
      of a lossy network, the underlying byte stream recovers the bytes
      lost; e.g., by retransmitting them.  This requires buffering and
      reassembly, in order to achieve the first bullet point (in-order
      delivery).

   Congestion control:  When used on a shared network, the underlying
      byte stream is congestion controlled.  Implementations of QUIC
      Services for Streams simply write outgoing frames to the
      underlying byte stream when that byte stream permits to.

   Confidentially and Integrity:  Unless used upon endpoints between
      which tampering or monitoring is a non-concern, the underlying
      byte stream provides confidentially and integrity protection.

   TLS over TCP provides all these capabilities.  UNIX sockets is an
   example that provides only the first two.  Congestion control is not
   used because UNIX sockets do not work on top of a shared network.
   Confidentiallity and integrity protection is considered unnecessary
   when the operating system can be trusted.

4.  QUIC Frames

   In QUIC Services for Streams, the following QUIC frames can be used,
   as if they were sent or received in the application packet number
   space:

   *  PADDING

   *  RESET_STREAM

   *  STOP_SENDING

   *  STREAM (0x0a and 0x0b)

   *  MAX_DATA

   *  MAX_STREAM_DATA

   *  MAX_STREAMS

   *  DATA_BLOCKED

   *  STREAM_DATA_BLOCKED

   *  STREAMS_BLOCKED

   *  CONNECTION_CLOSE

   The format and the meaning of these frames are unchanged, with the
   STREAM frames being an exception.  For the details of the STREAM
   frames, see Section 4.1.

   Use of other frames defined in [RFC9000] is prohibited.  Namely, ACK
   frames are not used, because underlying byte stream provides
   guaranteed delivery.  Use of frames that communicate Connection IDs
   and those related to path migration is forbidden.

   If an endpoint receives one of the prohibited frames, the endpoint
   MUST close the connection with an error of type FRAME_ENCODING_ERROR.

4.1.  STREAM Frames

   In this specification, only the 0x0a and 0x0b variants of the STREAM
   frame are allowed (i.e., the frame format that omits the Offset field
   but retains the Length field).

   Senders MUST send stream payload in order, omitting the Offset field
   of the STREAM frames.

   Receivers retain the total amount of bytes being received for each
   stream, and when receiving a STREAM frame, uses that value to
   determine the offset of the newly received STREAM frame.

   Unlike QUIC version 1, receives do not need to buffer and reassemble
   the payload of each incoming stream.  This is because the sender
   sends the STREAM frames in order and the underlying stream guarantees
   in-order delivery.  The payload being received can be passed to the
   application as they arrive.

   Use of the Length field is mandated, because QUIC Services for
   Streams operates on top of bi-directional streams and the packet
   boundary is not observable.

4.2.  QSS_TRANSPORT_PARAMETERS Frames

   In QUIC Services for Streams, Transport Parameters are exchanged as
   frames.

   QSS_TRANSPORT_PARAMETERS frames are formatted as shown in Figure 1.

   QSS_TRANSPORT_PARAMETERS Frame {
     Type (i) = 0x3f5153300d0a0d0a,
     Length (i),
     Transport Parameters (..),
   }

              Figure 1: QSS_TRANSPORT_PARAMETERS Frame Format

   QSS_TRANSPORT_PARAMETERS frames contain the following fields:

   Length:  A variable-length integer specifying the length of the
      Transport Parameters field in this QSS_TRANSPORT_PARAMETERS frame.

   Transport Parameters:  The Transport Parameters.  The encoding of the
      payload is as defined in Section 18 of [RFC9000].

   The QSS_TRANSPORT_PARAMETERS frame is the first frame being sent by
   an endpoint.  Endpoints MUST send the QSS_TRANSPORT_PARAMETERS frame
   as soon as the underlying byte stream becomes available.  Note
   neither endpoint needs to wait for the peer's Transport Parameters
   before sending its own, as Transport Parameters are a unilateral
   declaration of an endpoint's capabilities (Section 7.4 of [RFC9000]).

   If the first frame being received by an endpoint is not a
   QSS_TRANSPORT_PARAMETERS frame, the endpoint MUST close the
   connection with an error of type TRANSPORT_PARAMETER_ERROR.

   The frame type (0x3f5153300d0a0d0a; "\xffQS0\r\n\r\n" on wire) has
   been chosen so that it can be used to disambiguate QUIC Services for
   Streams from HTTP/1.1 ([RFC9112]) and HTTP/2.

4.3.  QSS_PING Frames

   In QUIC Services for Streams, QSS_PING frames allow endpoints to test
   peer reachability above the underlying byte stream.

   QSS_PING frames are formatted as shown in Figure 2.

   QSS_PING Frame {
     Type (i) = 0xTBD..0xTBD+1,
     Sequence Number (i),
   }

                      Figure 2: QSS_PING Frame Format

   Type 0xTBD is used for sending a ping (i.e., request the peer to
   respond).  Type 0xTBD+1 is used in response.

   QSS_PING frames contain the following fields:

   Sequence Number:  A variable-length integer used to identify the
      ping.

   When sending QSS_PING frames of type 0xTBD, endpoints MUST send
   monotonically increasing values in the Sequence Number field, since
   that allows the endpoints to identify to which ping the peer has
   responded.

   When sending QSS_PING frames of type 0xTBD+1 in response, endpoints
   MUST echo the Sequence Number that they have received.

   When receiving multiple QSS_PING frames of type 0xTBD before having
   the chance to respond, an endpoint MAY only respond with one QSS_PING
   frame of type 0xTBD+1 carrying the largest Sequence Number that the
   endpoint has received.

4.4.  Extension Frames

   As is the case with QUIC version 1, use of extension frames have to
   be negotiated before use; see Section 19.21 of [RFC9000].

5.  Transport Parameters

   QUIC Services for Streams uses a subset of Transport Parameters
   defined in [RFC9000].  Also, one new Transport Parameter specific to
   QUIC Services for Streams is defined.

5.1.  Permitted and Forbidden Transport Parameters

   In QUIC Services for Streams, use of the following Transport
   Parameters is allowed.

   *  max_idle_timeout

   *  initial_max_data

   *  initial_max_stream_data_bidi_local

   *  initial_max_stream_data_bidi_remote

   *  initial_max_stream_data_uni

   *  initial_max_streams_bidi

   *  initial_max_streams_uni

   The definition of these frames are unchanged.

   Use of other Transport Parameters defined in [RFC9000] is prohibited.
   When an endpoint receives one of the prohibited Transport Parameters,
   the endpoint MUST close the connection with an error of type
   TRANSPORT_PARAMETER_ERROR.

   Endpoint MUST NOT send Transport Parameters that extend QUIC version
   1, unless they are specified to be compatible with QUIC Services for
   Streams.

   When receiving Transport Parameters not defined in QUIC version 1,
   receivers MUST ignore them unless they are specified to be usable on
   QUIC Services for Streams.

5.2.  max_frame_size Transport Parameter

   The max_frame_size Transport Parameter (0xTBD) is a variable-length
   integer value specifying the maximum size of the QUIC frame that the
   peer can send, in the unit of bytes.

   The initial value of the max_frame_size Transport Parameter is 16384.

   The maximum frame size can only be increased by sending the Transport
   Parameter.  It cannot be decreased.  When receiving a value below the
   minimum, receivers MUST close the connection with an error of type
   TRANSPORT_PARAMETER_ERROR.

   Endpoints MUST NOT send QUIC frames that exceed the maximum declared
   by the peer.

   When receiving QUIC frames that exceed the declared maximum,
   receivers MUST close the connection with an error of type
   FRAME_ENCODING_ERROR.

6.  Closing the Connection

   As is with QUIC version 1 ([RFC9000]), a connection can be closed
   either by a CONNECTION_CLOSE frame or by an idle timeout.

   Unlike QUIC version 1, there is no draining period; once an endpoint
   sends or receives the CONNECTION_CLOSE frame or reaches the idle
   timeout, all the resources allocated for the Service are freed and
   the underlying stream is closed immediately.

7.  Using 0-RTT

   TLS 1.3 ([RFC8446]) introduced the concept of early data (also knows
   as 0-RTT data).

   When using QUIC Services for Streams on top of TLS that supports
   early data, clients MAY use early data when resuming a connection, by
   reusing certain Transport Parameters as defined in Section 7.4.1 of
   [RFC9000].

   Similarly, when accepting early data, the servers MUST send Transport
   Parameters that obey to the restrictions defined in Section 7.4.1 of
   [RFC9000].

8.  Version Agility

   Unlike QUIC, QUIC Services for Streams does not define a mechanism
   for version negotiation.

   In large-scale deployments that require service and protocol version
   discovery, QUIC Services for Streams can and is likely to be used on
   top of TLS.  ALPN ([RFC7301]) is the preferred mechanism to negotiate
   between an application protocol built on top of this specification
   and others.

   When ALPN is unavailable, first 8 bytes exchanged on the stream
   (i.e., the type field of the QSS_TRANSPORT_PARAMETERS frame in the
   encoded form) can be used to identify if QUIC Services for Streams is
   in use.

9.  Implementation Considerations

   Like HTTP/3 ([RFC9114]) with Extensible Priorities ([RFC9218]),
   application protocols built on top of QUIC might use stream
   multiplexing in conjunction with a mechanism to request or specify
   the order in which the payload of the QUIC streams are to be
   delivered.

   To switch between QUIC streams with different priorities in a timely
   manner, implementations of QUIC Services for Streams should refrain
   from building deep buffers that contain QUIC frames to be sent in
   particular order.  Rather, endpoints are encouraged to wait for the
   underlying transport to become writable, and each time it becomes
   writable, write new frames based on the most recent prioritization
   signals.

   Implementations might also observe or tune the values of underlying
   tranport related to flow and congestion control, in order to minimize
   the amount of data buffered inside the transport layer without
   immediately being sent.  Note however that failures to tune these
   variables might lead to reduced throughput.

10.  Security Considerations

   TODO Security

11.  IANA Considerations

   TODO

12.  References

12.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

   [RFC9000]  Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

12.2.  Informative References

   [h2-stream-limits]
              Thomson, M. and L. Pardue, "Using HTTP/3 Stream Limits in
              HTTP/2", Work in Progress, Internet-Draft, draft-thomson-
              httpbis-h2-stream-limits-00, 6 November 2023,
              <https://datatracker.ietf.org/doc/html/draft-thomson-
              httpbis-h2-stream-limits-00>.

   [RFC7301]  Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application-Layer Protocol
              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,
              July 2014, <https://www.rfc-editor.org/rfc/rfc7301>.

   [RFC768]   Postel, J., "User Datagram Protocol", STD 6, RFC 768,
              DOI 10.17487/RFC0768, August 1980,
              <https://www.rfc-editor.org/rfc/rfc768>.

   [RFC9112]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP/1.1", STD 99, RFC 9112, DOI 10.17487/RFC9112,
              June 2022, <https://www.rfc-editor.org/rfc/rfc9112>.

   [RFC9113]  Thomson, M., Ed. and C. Benfield, Ed., "HTTP/2", RFC 9113,
              DOI 10.17487/RFC9113, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9113>.

   [RFC9114]  Bishop, M., Ed., "HTTP/3", RFC 9114, DOI 10.17487/RFC9114,
              June 2022, <https://www.rfc-editor.org/rfc/rfc9114>.

   [RFC9218]  Oku, K. and L. Pardue, "Extensible Prioritization Scheme
              for HTTP", RFC 9218, DOI 10.17487/RFC9218, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9218>.

   [RFC9293]  Eddy, W., Ed., "Transmission Control Protocol (TCP)",
              STD 7, RFC 9293, DOI 10.17487/RFC9293, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9293>.

   [webtrans-h2]
              Frindell, A., Kinnear, E., Pauly, T., Thomson, M.,
              Vasiliev, V., and G. Xie, "WebTransport over HTTP/2", Work
              in Progress, Internet-Draft, draft-ietf-webtrans-http2-07,
              23 October 2023, <https://datatracker.ietf.org/doc/html/
              draft-ietf-webtrans-http2-07>.

   [webtrans-h3]
              Frindell, A., Kinnear, E., and V. Vasiliev, "WebTransport
              over HTTP/3", Work in Progress, Internet-Draft, draft-
              ietf-webtrans-http3-08, 23 October 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-
              webtrans-http3-08>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Kazuho Oku
   Fastly
   Email: kazuhooku@gmail.com
